// src/main/scala/progscala2/typelessdomore/method-overloaded-return-v1.scX

// 서브타입 다형성(subtype polymorphism): 스칼라는 상속을 지원한다.

/**
* 언제 명시적으로 타입을 표기해야 하는가?
*   1. 변경 가능한 var 나 변경 불가능한 val 선언에서 값을 대입하지 않는 경우(ex> val book: String, var count: Int 같이 클래스 안에서 추상값을 선언하는 경우)
*   2. 모든 메서드 매개변수(ex> def deposit(amount: Money) = {...})
*   3. 다음과 같은 메서드 반환 타입의 경우
*   3-1. 메서드 안에서 return 을 명시적으로 호출하는 경우(메서드의 맨 마지막에서 호출한다고 해도 반환 타입을 명시해야 함)
*   3-2. 메서드가 재귀적인 경우
*   3-3. 오버로딩한 둘 이상의 메서드가 있고, 그중 한 메서드가 다른 메서드를 호출하는 경우, 호출하는 메서드에는 반환 타입을 표기해야 함
*   3-4. 컴파일러가 추론한 타입이 당신의 의도보다 더 일반적인 경우(ex> Any)
*/

// 'StringUtil'의 첫번째 버전(컴파일 오류 발생)
// 오류: 컴파일할 수 없음. 두번째 'joiner'에 String 반환 타입이 필요함
// Error: Won't compile: needs a String return type on the second "joiner".

object StringUtilV1 {
  def joiner(strings: String*): String = strings.mkString("-")

  // 컴파일 오류: 오버로딩한 메서드 중 한 메서드가 다른 메서드를 호출하는 경우 반환 타입을 지정해야 한다.
  def joiner(strings: List[String]) = joiner(strings :_*)
}

println( StringUtilV1.joiner(List("Programming", "Scala")) )
